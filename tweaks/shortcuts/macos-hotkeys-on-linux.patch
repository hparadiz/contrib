diff --git a/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc b/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc
index 18283c8016..56e6c6ac17 100644
--- a/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc
+++ b/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc
@@ -157,34 +157,34 @@ bool RenderViewContextMenuViews::GetAcceleratorForCommandId(
       return true;
 
     case IDC_CONTENT_CONTEXT_UNDO:
-      *accel = ui::Accelerator(ui::VKEY_Z, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_Z, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_REDO:
       // TODO(jcampan): should it be Ctrl-Y?
       *accel = ui::Accelerator(ui::VKEY_Z,
-                               ui::EF_SHIFT_DOWN | ui::EF_CONTROL_DOWN);
+                               ui::EF_SHIFT_DOWN | ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_CUT:
-      *accel = ui::Accelerator(ui::VKEY_X, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_X, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_COPY:
-      *accel = ui::Accelerator(ui::VKEY_C, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_C, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_PASTE:
-      *accel = ui::Accelerator(ui::VKEY_V, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_V, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_PASTE_AND_MATCH_STYLE:
       *accel = ui::Accelerator(ui::VKEY_V,
-                               ui::EF_SHIFT_DOWN | ui::EF_CONTROL_DOWN);
+                               ui::EF_SHIFT_DOWN | ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_SELECTALL:
-      *accel = ui::Accelerator(ui::VKEY_A, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_A, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_ROTATECCW:
@@ -200,16 +200,16 @@ bool RenderViewContextMenuViews::GetAcceleratorForCommandId(
       return true;
 
     case IDC_PRINT:
-      *accel = ui::Accelerator(ui::VKEY_P, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_P, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_RELOAD:
-      *accel = ui::Accelerator(ui::VKEY_R, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_R, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_SAVEPLUGINAS:
     case IDC_SAVE_PAGE:
-      *accel = ui::Accelerator(ui::VKEY_S, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_S, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
 #if BUILDFLAG(ENABLE_LENS_DESKTOP_GOOGLE_BRANDED_FEATURES)
@@ -256,7 +256,7 @@ bool RenderViewContextMenuViews::GetAcceleratorForCommandId(
     }
 
     case IDC_VIEW_SOURCE:
-      *accel = ui::Accelerator(ui::VKEY_U, ui::EF_CONTROL_DOWN);
+      *accel = ui::Accelerator(ui::VKEY_U, ui::EF_PLATFORM_ACCELERATOR);
       return true;
 
     case IDC_CONTENT_CONTEXT_EMOJI:
diff --git a/third_party/blink/renderer/core/editing/editing_behavior.cc b/third_party/blink/renderer/core/editing/editing_behavior.cc
index a303a91c9c..a390d90888 100644
--- a/third_party/blink/renderer/core/editing/editing_behavior.cc
+++ b/third_party/blink/renderer/core/editing/editing_behavior.cc
@@ -44,7 +44,7 @@ const unsigned kCtrlKey = WebInputEvent::kControlKey;
 const unsigned kAltKey = WebInputEvent::kAltKey;
 const unsigned kShiftKey = WebInputEvent::kShiftKey;
 const unsigned kMetaKey = WebInputEvent::kMetaKey;
-#if BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
 // Aliases for the generic key defintions to make kbd shortcuts definitions more
 // readable on OS X.
 const unsigned kOptionKey = kAltKey;
@@ -81,7 +81,7 @@ struct DomKeyKeyDownEntry {
   const char* name;
 };
 
-#if BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
 #define OPTION_OR_CTRL_KEY kOptionKey
 #else
 #define OPTION_OR_CTRL_KEY kCtrlKey
@@ -107,7 +107,7 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_DOWN, 0, "MoveDown"},
     {VKEY_DOWN, kShiftKey, "MoveDownAndModifySelection"},
     {VKEY_NEXT, kShiftKey, "MovePageDownAndModifySelection"},
-#if !BUILDFLAG(IS_MAC)
+#if !BUILDFLAG(IS_MAC) || !BUILDFLAG(IS_LINUX)
     {VKEY_UP, kCtrlKey, "MoveParagraphBackward"},
     {VKEY_UP, kCtrlKey | kShiftKey, "MoveParagraphBackwardAndModifySelection"},
     {VKEY_DOWN, kCtrlKey, "MoveParagraphForward"},
@@ -117,18 +117,18 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #endif
     {VKEY_HOME, 0, "MoveToBeginningOfLine"},
     {VKEY_HOME, kShiftKey, "MoveToBeginningOfLineAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
     {VKEY_PRIOR, kOptionKey, "MovePageUp"},
     {VKEY_NEXT, kOptionKey, "MovePageDown"},
 #endif
-#if !BUILDFLAG(IS_MAC)
+#if !BUILDFLAG(IS_MAC) || !BUILDFLAG(IS_LINUX)
     {VKEY_HOME, kCtrlKey, "MoveToBeginningOfDocument"},
     {VKEY_HOME, kCtrlKey | kShiftKey,
      "MoveToBeginningOfDocumentAndModifySelection"},
 #endif
     {VKEY_END, 0, "MoveToEndOfLine"},
     {VKEY_END, kShiftKey, "MoveToEndOfLineAndModifySelection"},
-#if !BUILDFLAG(IS_MAC)
+#if !BUILDFLAG(IS_MAC) || !BUILDFLAG(IS_LINUX)
     {VKEY_END, kCtrlKey, "MoveToEndOfDocument"},
     {VKEY_END, kCtrlKey | kShiftKey, "MoveToEndOfDocumentAndModifySelection"},
 #endif
@@ -137,7 +137,7 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_DELETE, 0, "DeleteForward"},
     {VKEY_BACK, OPTION_OR_CTRL_KEY, "DeleteWordBackward"},
     {VKEY_DELETE, OPTION_OR_CTRL_KEY, "DeleteWordForward"},
-#if BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
     {'B', kCommandKey, "ToggleBold"},
     {'I', kCommandKey, "ToggleItalic"},
     {'U', kCommandKey, "ToggleUnderline"},
@@ -161,14 +161,14 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #if !BUILDFLAG(IS_MAC)
     // On OS X, we pipe these back to the browser, so that it can do menu item
     // blinking.
-    {'C', kCtrlKey, "Copy"},
-    {'V', kCtrlKey, "Paste"},
-    {'V', kCtrlKey | kShiftKey, "PasteAndMatchStyle"},
-    {'X', kCtrlKey, "Cut"},
-    {'A', kCtrlKey, "SelectAll"},
-    {'Z', kCtrlKey, "Undo"},
-    {'Z', kCtrlKey | kShiftKey, "Redo"},
-    {'Y', kCtrlKey, "Redo"},
+    {'C', kCommandKey, "Copy"},
+    {'V', kCommandKey, "Paste"},
+    {'V', kCommandKey | kShiftKey, "PasteAndMatchStyle"},
+    {'X', kCommandKey, "Cut"},
+    {'A', kCommandKey, "SelectAll"},
+    {'Z', kCommandKey, "Undo"},
+    {'Z', kCommandKey | kShiftKey, "Redo"},
+    {'Y', kCommandKey, "Redo"},
 #endif
 #if BUILDFLAG(IS_WIN)
     {VKEY_BACK, kAltKey, "Undo"},
@@ -279,19 +279,19 @@ bool EditingBehavior::ShouldInsertCharacter(const KeyboardEvent& event) const {
   // unexpected behaviour
   if (ch < ' ')
     return false;
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+//#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
   // According to XKB map no keyboard combinations with ctrl key are mapped to
   // printable characters, however we need the filter as the DomKey/text could
   // contain printable characters.
-  if (event.ctrlKey())
-    return false;
-#elif !BUILDFLAG(IS_WIN)
+  //if (event.ctrlKey())
+  //  return false;
+#if !BUILDFLAG(IS_WIN)
   // Don't insert ASCII character if ctrl w/o alt or meta is on.
   // On Mac, we should ignore events when meta is on (Command-<x>).
   if (ch < 0x80) {
     if (event.ctrlKey() && !event.altKey())
       return false;
-#if BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
     if (event.metaKey())
       return false;
 #endif
diff --git a/ui/events/base_event_utils.cc b/ui/events/base_event_utils.cc
index 1483f6963f..3550da137f 100644
--- a/ui/events/base_event_utils.cc
+++ b/ui/events/base_event_utils.cc
@@ -20,7 +20,7 @@ namespace {
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
 const int kSystemKeyModifierMask = EF_ALT_DOWN | EF_COMMAND_DOWN;
-#elif BUILDFLAG(IS_APPLE)
+#elif BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_LINUX)
 // Alt modifier is used to input extended characters on Mac.
 const int kSystemKeyModifierMask = EF_COMMAND_DOWN;
 #else
diff --git a/ui/events/event_constants.h b/ui/events/event_constants.h
index 014d666c13..19b8779431 100644
--- a/ui/events/event_constants.h
+++ b/ui/events/event_constants.h
@@ -53,7 +53,7 @@ constexpr EventFlags EF_MOUSE_BUTTON =
 #if BUILDFLAG(IS_APPLE)
 constexpr EventFlags EF_PLATFORM_ACCELERATOR = EF_COMMAND_DOWN;
 #else
-constexpr EventFlags EF_PLATFORM_ACCELERATOR = EF_CONTROL_DOWN;
+constexpr EventFlags EF_PLATFORM_ACCELERATOR = EF_COMMAND_DOWN;
 #endif
 
 // Flags specific to key events.
diff --git a/ui/views/controls/textfield/textfield.cc b/ui/views/controls/textfield/textfield.cc
index 57254b941e..4ba9179734 100644
--- a/ui/views/controls/textfield/textfield.cc
+++ b/ui/views/controls/textfield/textfield.cc
@@ -275,9 +275,9 @@ Textfield::Textfield()
   // These allow BrowserView to pass edit commands from the Chrome menu to us
   // when we're focused by simply asking the FocusManager to
   // ProcessAccelerator() with the relevant accelerators.
-  AddAccelerator(ui::Accelerator(ui::VKEY_X, ui::EF_CONTROL_DOWN));
-  AddAccelerator(ui::Accelerator(ui::VKEY_C, ui::EF_CONTROL_DOWN));
-  AddAccelerator(ui::Accelerator(ui::VKEY_V, ui::EF_CONTROL_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_X, ui::EF_PLATFORM_ACCELERATOR));
+  AddAccelerator(ui::Accelerator(ui::VKEY_C, ui::EF_PLATFORM_ACCELERATOR));
+  AddAccelerator(ui::Accelerator(ui::VKEY_V, ui::EF_PLATFORM_ACCELERATOR));
 #endif
 
   SetAccessibilityProperties(ax::mojom::Role::kTextField);
@@ -2351,51 +2351,51 @@ ui::TextEditCommand Textfield::GetCommandForKeyEvent(
     return ui::TextEditCommand::INVALID_COMMAND;
 
   const bool shift = event.IsShiftDown();
-#if BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
   const bool command = event.IsCommandDown();
 #endif
   const bool control = event.IsControlDown() || event.IsCommandDown();
   const bool alt = event.IsAltDown() || event.IsAltGrDown();
   switch (event.key_code()) {
     case ui::VKEY_Z:
-      if (control && !shift && !alt)
+      if (command && !shift && !alt)
         return ui::TextEditCommand::UNDO;
-      return (control && shift && !alt) ? ui::TextEditCommand::REDO
+      return (command && shift && !alt) ? ui::TextEditCommand::REDO
                                         : ui::TextEditCommand::INVALID_COMMAND;
     case ui::VKEY_Y:
-      return (control && !alt) ? ui::TextEditCommand::REDO
+      return (command && !alt) ? ui::TextEditCommand::REDO
                                : ui::TextEditCommand::INVALID_COMMAND;
     case ui::VKEY_A:
-      return (control && !alt) ? ui::TextEditCommand::SELECT_ALL
+      return (command && !alt) ? ui::TextEditCommand::SELECT_ALL
                                : ui::TextEditCommand::INVALID_COMMAND;
     case ui::VKEY_X:
-      return (control && !alt) ? ui::TextEditCommand::CUT
+      return (command && !alt) ? ui::TextEditCommand::CUT
                                : ui::TextEditCommand::INVALID_COMMAND;
     case ui::VKEY_C:
-      return (control && !alt) ? ui::TextEditCommand::COPY
+      return (command && !alt) ? ui::TextEditCommand::COPY
                                : ui::TextEditCommand::INVALID_COMMAND;
     case ui::VKEY_V:
-      return (control && !alt) ? ui::TextEditCommand::PASTE
+      return (command && !alt) ? ui::TextEditCommand::PASTE
                                : ui::TextEditCommand::INVALID_COMMAND;
     case ui::VKEY_RIGHT:
       // Ignore alt+right, which may be a browser navigation shortcut.
       if (alt)
         return ui::TextEditCommand::INVALID_COMMAND;
       if (!shift) {
-        return control ? ui::TextEditCommand::MOVE_WORD_RIGHT
+        return command ? ui::TextEditCommand::MOVE_WORD_RIGHT
                        : ui::TextEditCommand::MOVE_RIGHT;
       }
-      return control ? ui::TextEditCommand::MOVE_WORD_RIGHT_AND_MODIFY_SELECTION
+      return command ? ui::TextEditCommand::MOVE_WORD_RIGHT_AND_MODIFY_SELECTION
                      : ui::TextEditCommand::MOVE_RIGHT_AND_MODIFY_SELECTION;
     case ui::VKEY_LEFT:
       // Ignore alt+left, which may be a browser navigation shortcut.
       if (alt)
         return ui::TextEditCommand::INVALID_COMMAND;
       if (!shift) {
-        return control ? ui::TextEditCommand::MOVE_WORD_LEFT
+        return command ? ui::TextEditCommand::MOVE_WORD_LEFT
                        : ui::TextEditCommand::MOVE_LEFT;
       }
-      return control ? ui::TextEditCommand::MOVE_WORD_LEFT_AND_MODIFY_SELECTION
+      return command ? ui::TextEditCommand::MOVE_WORD_LEFT_AND_MODIFY_SELECTION
                      : ui::TextEditCommand::MOVE_LEFT_AND_MODIFY_SELECTION;
     case ui::VKEY_HOME:
       if (shift) {
